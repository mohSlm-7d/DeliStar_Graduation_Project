package com.deli.star.service;

import java.time.LocalDate;
import java.util.Map;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Company;
import com.deli.star.DTO.Driver;
import com.deli.star.processor.AddAccountProcessor;
import com.deli.star.processor.EditAdminAndCompanyProcessor;
import com.deli.star.processor.EditDriverProcessor;
import com.deli.star.response.codes.ResponseStatus;

@Path("/Account/")
public class AccountsService {
	@POST @Path("Admin/Add") @Produces(MediaType.APPLICATION_JSON)
	public String AddAdmin(String signUpRequest) {
		JSONObject response = new JSONObject();
		try {
			
			System.out.println("requested Add Admin and company (REGISTRATION)");
			JSONParser parser = new JSONParser();
			JSONObject requestJSON =  (JSONObject)parser.parse(signUpRequest);
			
			
			Admin newAdmin = new Admin();
			
			
			newAdmin.setAdminName(requestJSON.get("adminName").toString());
			newAdmin.setAdminPhoneNo(requestJSON.get("adminPhoneNo").toString());
			newAdmin.setAdminGender(requestJSON.get("adminGender").toString());
			newAdmin.setAdminEmail(requestJSON.get("adminEmail").toString());
			newAdmin.setAdminPassword(requestJSON.get("adminPassword").toString());
			
			
			
			Company newCompany = new Company();
			newCompany.setCompanyEmail(requestJSON.get("companyEmail").toString());
			newCompany.setCompanyName(requestJSON.get("companyName").toString());
			newCompany.setCompanyPhoneNo(requestJSON.get("companyPhoneNo").toString());
			
			newAdmin.setCompany(newCompany);
			
			AddAccountProcessor signUpProcess = new AddAccountProcessor(); 
			
			Map <String, String> statusResult = signUpProcess.AddAdminAndCompany(newAdmin);
			
			System.out.println("step 2 : LocalDate.now()"  + LocalDate.now());
			if(statusResult.get("status").equals(ResponseStatus.Failed.toString())) {
				response.put("status", ResponseStatus.Failed.toString());
				if(statusResult.containsKey("errorMssg")) {
					response.put("errorMssg", statusResult.get("errorMssg").toString());
				}
				
				return response.toString();
			}
			
			System.out.println("Finished Registration");
			response.put("status", ResponseStatus.Success.toString());
			
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
		
	}
	@POST @Path("Driver/Add") @Produces(MediaType.APPLICATION_JSON)
	public String AddDriver(String addRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(addRequest);
			
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			Driver newDriver = new Driver();
			newDriver.setDriverName(requestJSON.get("driverName").toString());
			newDriver.setDriverEmail(requestJSON.get("driverEmail").toString());
			newDriver.setDriverPhoneNo(requestJSON.get("driverPhoneNo").toString());
			newDriver.setDriverGender(requestJSON.get("driverGender").toString());
			newDriver.setDriverPassword(requestJSON.get("driverPassword").toString());
			
			
			AddAccountProcessor addDriverProcess = new AddAccountProcessor(); 
			Map<String, String> statusResult = addDriverProcess.AddDriver(requestingAdmin, newDriver);
			if(statusResult.get("status").equals(ResponseStatus.Failed.toString())) {				
				if(statusResult.containsKey("errorMssg")) {
					response.put("errorMssg", statusResult.get("errorMssg"));
					return response.toString();
				}
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals( responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			response.
			return response.toString();			
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	@POST @Path("Admin/Edit") @Produces(MediaType.APPLICATION_JSON)
	public String EditAdminAndCompany(String editRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON =  (JSONObject)parser.parse(editRequest);
			
			
			Admin requestingAdmin = new Admin();
			
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminName(requestJSON.get("adminName").toString());
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			requestingAdmin.setAdminPhoneNo(requestJSON.get("adminPhoneNo").toString());
			requestingAdmin.setAdminGender(requestJSON.get("adminGender").toString());
			requestingAdmin.setAdminEmail(requestJSON.get("adminEmail").toString());
			requestingAdmin.setAdminPassword(requestJSON.get("adminPassword").toString());
			
			
			
			
			
			Company editedCompany = new Company();
			editedCompany.setCompanyEmail(requestJSON.get("companyEmail").toString());
			editedCompany.setCompanyName(requestJSON.get("companyName").toString());
			editedCompany.setCompanyPhoneNo(requestJSON.get("companyPhoneNo").toString());
				
			requestingAdmin.setCompany(editedCompany);
			
			
			EditAdminAndCompanyProcessor editProcess = new EditAdminAndCompanyProcessor(); 
			boolean edited = editProcess.EditAdminAndCompany(requestingAdmin);
			if(!edited) {
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();
			}
			
			response.put("status", ResponseStatus.Success.toString());

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();	
			
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	
	
	
	@POST @Path("Driver/Edit") @Produces(MediaType.APPLICATION_JSON)
	public String EditDriver(String editRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(editRequest);
			
			
			
			
			Driver requestingDriver = new Driver();
			requestingDriver.setDriverId(Integer.parseInt(requestJSON.get("driverId").toString()));
			requestingDriver.setDriverToken(requestJSON.get("driverToken").toString());
			
			
			requestingDriver.setDriverName(requestJSON.get("driverName").toString());
			requestingDriver.setDriverEmail(requestJSON.get("driverEmail").toString());
			requestingDriver.setDriverPhoneNo(requestJSON.get("driverPhoneNo").toString());
			requestingDriver.setDriverGender(requestJSON.get("driverGender").toString());
			requestingDriver.setDriverPassword(requestJSON.get("driverPassword").toString());
			
			
			EditDriverProcessor editDriverProcess = new EditDriverProcessor(); 
			boolean editedDriver = editDriverProcess.EditDriver(requestingDriver);
			
			if(!editedDriver) {
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingDriver.getDriverToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingDriver.getDriverToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				response.put("driverToken", requestingDriver.getDriverToken().toString());
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			response.put("driverToken", requestingDriver.getDriverToken().toString());			
			return response.toString();			
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
}
