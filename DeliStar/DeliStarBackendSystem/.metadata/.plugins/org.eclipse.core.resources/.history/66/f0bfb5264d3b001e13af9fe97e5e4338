package com.deli.star.processor;

import java.sql.Savepoint;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Company;
import com.deli.star.DTO.Customer;
import com.deli.star.DTO.Order;
import com.deli.star.authentication.TokenAuthValidator;
import com.deli.star.dao.DAO;
import com.deli.star.response.codes.ResponseStatus;
import com.deli.star.validation.ValidationUtility;

public class EditOrderProcessor {
	public Map<String, String> EditOrder(Admin requestingAdmin, Order orderToEdit) {
		Map<String, String> result = new HashMap<String, String>();
		try {
			// Admin token Authentication.
			TokenAuthValidator adminAuth = new TokenAuthValidator();
			boolean authentic = adminAuth.ValidateAdminToken(requestingAdmin);
			if(!authentic) {
				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}

			DAO fetch = new DAO();


			// Authorization check.
			// Assuming that both(Admin, Order) belong to the same company, so the system assigned
			// the company ID of the admin to the order and if there's such an order 
			// then the admin is authorized to edit the order details.
			Company adminCompany = fetch.GetAdminCompany(requestingAdmin);
			orderToEdit.setCompanyId(adminCompany.getCompanyId());
			Order foundOrder = fetch.GetOrder(orderToEdit);
			
			if(foundOrder == null || foundOrder.getCompanyId() == 0) {
				requestingAdmin.setAdminToken(ResponseStatus.Not_Authorized.toString());

				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
			
			
			// Authorization check.
			// Checking if the assigned driver & admin & order all belong to the same company.
			Company driverCompany = fetch.GetDriverCompany(orderToEdit.getAssignedDriver());
			if(driverCompany.getCompanyId() != adminCompany.getCompanyId() || driverCompany.getCompanyId() != foundOrder.getCompanyId()) {
				requestingAdmin.setAdminToken(ResponseStatus.Not_Authorized.toString());

				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
				

			// Validating the order's customer information.
			Customer orderCustomer = orderToEdit.getCustomer();
			orderCustomer.setCustomerName(ValidationUtility.validateName(orderCustomer.getCustomerName()));
			if(orderCustomer.getCustomerName() == null) {
				fetch.CloseConnection();
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "The customer name is invalid. Customer name must only contain characters and spaces and can contain at most 25 characters.");
				return result;
			}

			orderCustomer.setCustomerPhoneNo(ValidationUtility.validatePhoneNo(orderCustomer.getCustomerPhoneNo()));
			if(orderCustomer.getCustomerPhoneNo() == null) {
				fetch.CloseConnection();
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "The customer phone number is invalid. Customer phone number must start with + and your country code "
						+ "and must at contain 7 digits minimum and 15 digits maximum.");
				return result;
			}

			orderToEdit.setCustomer(orderCustomer);


			// Validating order info.
			if(foundOrder.getOrderRank() != 0 && foundOrder.getOrderState().equals("pending")) {
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "This order is being delivered now!");

				return result;
			}

			if(orderToEdit.getOrderDeliveryDate().compareTo(LocalDate.now()) < 0){
				fetch.CloseConnection();
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "The order delivery date is in the past. Order delivery date must be at least today ?".replace("?", LocalDate.now().toString()));
				return result;
			}

			if(foundOrder.getOrderState().equals("confirmed")) {
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "A confirmed order cannot be edited!");
				return result;
			}

			if(foundOrder.getOrderState().equals("cancelled") && orderToEdit.getOrderDeliveryDate().compareTo(LocalDate.now()) >= 0) {
				System.out.println("this order is cancelled and has been rescheduled to a future date.");
				orderToEdit.setOrderState("pending");
			}
			else {
				orderToEdit.setOrderState(foundOrder.getOrderState());
			}
			
			
			
			Customer foundCustomer = fetch.GetCustomer(foundOrder.getCustomer());
			if(!foundCustomer.getCustomerPhoneNo().equals(orderCustomer.getCustomerPhoneNo()) || !foundCustomer.getCustomerName().equals(orderCustomer.getCustomerName())) {
				
				if (!foundCustomer.getCustomerPhoneNo().equals(orderCustomer.getCustomerPhoneNo())){
					fetch.AddCustomer(orderCustomer);
				}
				
				else{
					orderCustomer.setCustomerId(foundOrder.getCustomer().getCustomerId());
					boolean customerUpdated = fetch.UpdateCustomer(orderCustomer);
					if(!customerUpdated) {
						fetch.UpdateCustomer(foundCustomer);
						fetch.CloseConnection();
	
						result.put("status", ResponseStatus.Failed.toString());
	
						return result;
					}
					
				}
			}


			orderCustomer.setCustomerId(0);
			
			orderCustomer = fetch.GetCustomer(orderCustomer);
			
			orderToEdit.setCustomer(orderCustomer);
			orderToEdit.setCompanyId(adminCompany.getCompanyId());
			boolean orderUpdated = fetch.UpdateOrder(orderToEdit);

			if(!orderUpdated) {
				fetch.UpdateOrder(foundOrder);
				fetch.CloseConnection();

				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}




			result.put("status", ResponseStatus.Success.toString());
			return result;
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		return null;
	}
}
