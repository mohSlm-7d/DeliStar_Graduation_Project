package com.deli.star.processor;

import java.sql.Savepoint;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Company;
import com.deli.star.DTO.Order;
import com.deli.star.authentication.TokenAuthValidator;
import com.deli.star.dao.DAO;
import com.deli.star.response.codes.ResponseStatus;

public class ReschedulingOrderProcessor {
	public Map<String, String> RescheduleOrder(Admin requestingAdmin, Order rescheduledOrder) {
		Map<String, String> result = new HashMap<String, String>();
		try{
			// Admin token Authentication.
			TokenAuthValidator adminAuth = new TokenAuthValidator();
			boolean authentic = adminAuth.ValidateAdminToken(requestingAdmin);
			if(!authentic) {
				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
			
			
			DAO updateOrder = new DAO();
			
			
			Company adminCompany = updateOrder.GetAdminCompany(requestingAdmin);
			rescheduledOrder.setCompanyId(adminCompany.getCompanyId());
			Order foundOrder = updateOrder.GetOrder(rescheduledOrder);
			if(foundOrder.getCompanyId() == 0) {
				requestingAdmin.setAdminToken(ResponseStatus.Not_Authorized.toString());
				
				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
			
			
			if(foundOrder.getOrderState().equals("confirmed")) {
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "This order is already confirmed.");
				return result;
			}
			if(rescheduledOrder.getOrderDeliveryDate().compareTo(LocalDate.now()) < 0) {
				result.put("status", ResponseStatus.Failed.toString());
				result.put("errorMssg", "The order delivery date is in the past.");
				return result;
			}
			
			
			System.out.println("rescheduledOrder.getOrderDeliveryDate().compareTo(LocalDate.now()) >= 0 ::: " +  rescheduledOrder.getOrderDeliveryDate().compareTo(LocalDate.now()));
			if(foundOrder.getOrderState().equals("cancelled") && rescheduledOrder.getOrderDeliveryDate().compareTo(LocalDate.now()) >= 0) {				
				System.out.println("this order is cancelled and has been rescheduled to a future date.");
				
				foundOrder.setOrderState("pending");
			}
			
			foundOrder.setOrderDeliveryDate(rescheduledOrder.getOrderDeliveryDate());
			System.out.println("IN PROcessor, foundORder Locatoion coordinates: " + foundOrder.getLocationCoordinates());
			boolean rescheduled = updateOrder.UpdateOrder(foundOrder); 
			if(!rescheduled) {
				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
			
			result.put("status", ResponseStatus.Success.toString());
			return result;
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		return result;
	}
}
