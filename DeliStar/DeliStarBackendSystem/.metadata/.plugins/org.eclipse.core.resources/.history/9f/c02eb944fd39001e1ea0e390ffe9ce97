package com.deli.star.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Customer;
import com.deli.star.DTO.Driver;
import com.deli.star.DTO.Order;
import com.deli.star.processor.AddOrderProcessor;
import com.deli.star.processor.AdminOrderCancellationProcessor;
import com.deli.star.processor.DeleteOrderProcessor;
import com.deli.star.processor.EditOrderProcessor;
import com.deli.star.processor.FetchOrdersProcessor;
import com.deli.star.processor.GMapsApiProcessor;
import com.deli.star.processor.ReschedulingOrderProcessor;
import com.deli.star.response.codes.ResponseStatus;

@Path("/Admin/Orders/")
public class AdminOrdersService {
	@POST @Path("Add") @Produces(MediaType.APPLICATION_JSON)
	public String AddOrder(String addOrderRequest) {
		JSONObject response = new JSONObject();
		Admin requestingAdmin = new Admin();
		try {
			System.out.println("adding Order request: " + addOrderRequest);
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(addOrderRequest);
			
			
			
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
		ArrayList<Order> ordersList = new ArrayList<Order>();
		JSONArray listOfOrders = (JSONArray)requestJSON.get("orders");
		for(int i = 0; i< listOfOrders.size(); i++) {
			JSONObject orderItr = (JSONObject)listOfOrders.get(i);
			Order newOrder = new Order();
			newOrder.setOrderNumber(Integer.parseInt(orderItr.get("orderNumber").toString()));
			
			LocalDate deliveryDate = LocalDate.parse(orderItr.get("orderDeliveryDate").toString().split("T")[0]);
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("YYYY-MM-dd");
			newOrder.setOrderDeliveryDate(LocalDate.parse(formatter.format(deliveryDate).toString()));
			
			
			newOrder.setOrderDropOffAddress(orderItr.get("orderDropOffAddress").toString());
			newOrder.setOrderLocationLink(orderItr.get("orderLocationLink").toString());
			
			
			
			newOrder.setLocationPlusCode(orderItr.get("locationPlusCode").toString());
			GMapsApiProcessor getCoordinatesProcess  = new GMapsApiProcessor();
			newOrder.setLocationCoordinates(getCoordinatesProcess.GetCoordinates(newOrder.getLocationPlusCode()));
			
			
			
			
			Driver assignedDriver = new Driver();
			assignedDriver.setDriverId(Integer.parseInt(orderItr.get("assignedDriverId").toString()));
			newOrder.assignDriver(assignedDriver);
			
			
			Customer customer = new Customer();
			customer.setCustomerName(orderItr.get("customerName").toString());
			customer.setCustomerPhoneNo(orderItr.get("customerPhoneNo").toString());
			newOrder.setCustomer(customer);
			
			ordersList.add(newOrder);
		}
			
			
			
			
			AddOrderProcessor addOrderProcess = new AddOrderProcessor();
			Map<String, String> resultStatus = addOrderProcess.AddOrders(requestingAdmin, ordersList);
			
			if(resultStatus.get("status").equals(ResponseStatus.Failed.toString())) {
				if(resultStatus.containsKey("errorMssg")) {
					response.put("status", resultStatus.get("status").toString());
					response.put("errorMssg", resultStatus.get("errorMssg").toString());
					
					JSONObject adminJSON = new JSONObject();
					adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
					response.put("admin", adminJSON);
					
					return response.toString();
				}
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			System.out.println("adding Order response: " + response);
			return response.toString();	
		}catch(Exception e) {
			e.printStackTrace();
			response.put("status", ResponseStatus.Failed.toString());
			//response.put("errorMessage", "The process you have requested is invalid!");
			//response.put("errorMessage", e.getMessage());
			System.out.println(e.getMessage());
		}
		
		 
		
		return response.toString();
	}
	
	@POST @Path("Reschedule") @Produces(MediaType.APPLICATION_JSON)
	public String RescheduleOrder(String rescheduleRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(rescheduleRequest);
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			Order rescheduledOrder = new Order();
			rescheduledOrder.setOrderNumber(Integer.parseInt(requestJSON.get("orderNumber").toString()));
			
			LocalDate deliveryDate = LocalDate.parse(requestJSON.get("orderDeliveryDate").toString().split("T")[0]);
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("YYYY-MM-dd");
			rescheduledOrder.setOrderDeliveryDate(LocalDate.parse(formatter.format(deliveryDate).toString()));
			
			rescheduledOrder.setOrderDropOffAddress(requestJSON.get("orderDropOffAddress").toString());
			rescheduledOrder.setOrderLocationLink(requestJSON.get("orderLocationLink").toString());
			
			rescheduledOrder.setLocationPlusCode(requestJSON.get("locationPlusCode").toString());
			GMapsApiProcessor getCoordinatesProcess  = new GMapsApiProcessor();
			rescheduledOrder.setLocationCoordinates(getCoordinatesProcess.GetCoordinates(rescheduledOrder.getLocationPlusCode()));


			Driver assignedDriver = new Driver();
			assignedDriver.setDriverId(Integer.parseInt(requestJSON.get("assignedDriverId").toString()));
			rescheduledOrder.assignDriver(assignedDriver);
							
							
			Customer editedCustomer = new Customer();
			editedCustomer.setCustomerName(requestJSON.get("customerName").toString());
			editedCustomer.setCustomerPhoneNo(requestJSON.get("customerPhoneNo").toString());
			rescheduledOrder.setCustomer(editedCustomer);
			
			
			ReschedulingOrderProcessor reschedulingProcess = new ReschedulingOrderProcessor();
			Map<String, String> resultStatus = reschedulingProcess.RescheduleOrder(requestingAdmin, rescheduledOrder);
			
			if(resultStatus.get("status").equals(ResponseStatus.Failed.toString())) {
				if(resultStatus.containsKey("errorMssg")) {
					response.put("status", resultStatus.get("status").toString());
					response.put("errorMssg", resultStatus.get("errorMssg").toString());
					
					JSONObject adminJSON = new JSONObject();
					adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
					response.put("admin", adminJSON);
					
					return response.toString();
				}
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	@POST @Path("Edit") @Produces(MediaType.APPLICATION_JSON)
	public String EditOrder(String editOrderRequest) {
		JSONObject response = new JSONObject();
		Admin requestingAdmin = new Admin();
		try {
			System.out.println("REquest in EDIT ORDER: " + editOrderRequest);
			
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(editOrderRequest);
			
			System.out.println("REqquestJSON "+ requestJSON);
			
			
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			JSONObject editedOrderJSON = (JSONObject)requestJSON.get("order");
			
			System.out.println("orderJsOn " + editedOrderJSON);
			System.out.println("orderJsOnPlusCoDe " + editedOrderJSON.get("locationPlusCode"));
				
			Order editedOrder = new Order();
			editedOrder.setOrderNumber(Integer.parseInt(editedOrderJSON.get("orderNumber").toString()));
			editedOrder.setOrderDropOffAddress(editedOrderJSON.get("orderDropOffAddress").toString());
			editedOrder.setOrderLocationLink(editedOrderJSON.get("orderLocationLink").toString());
				
			LocalDate deliveryDate = LocalDate.parse(editedOrderJSON.get("orderDeliveryDate").toString().split("T")[0]);
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("YYYY-MM-dd");
			editedOrder.setOrderDeliveryDate(LocalDate.parse(formatter.format(deliveryDate).toString()));
				
			
			System.out.println("LOCATION_PLUS_CODEDEEE: BEEFOOORE:  " + editedOrderJSON.get("locationPlusCode").toString());
			editedOrder.setLocationPlusCode(editedOrderJSON.get("locationPlusCode").toString());
			GMapsApiProcessor getCoordinatesProcess  = new GMapsApiProcessor();
			System.out.println("LOCATION_PLUS_CODEDEEE: AFtER:   " + editedOrder.getLocationPlusCode());
			editedOrder.setLocationCoordinates(getCoordinatesProcess.GetCoordinates(editedOrder.getLocationPlusCode()));
			System.out.println("LOCATION_Coordinates::   " + editedOrder.getLocationCoordinates());	
			Driver assignedDriver = new Driver();
			assignedDriver.setDriverId(Integer.parseInt(editedOrderJSON.get("assignedDriverId").toString()));
			editedOrder.assignDriver(assignedDriver);
				
				
			Customer editedCustomer = new Customer();
			editedCustomer.setCustomerName(editedOrderJSON.get("customerName").toString());
			editedCustomer.setCustomerPhoneNo(editedOrderJSON.get("customerPhoneNo").toString());
			editedOrder.setCustomer(editedCustomer);


			EditOrderProcessor editOrderProcess = new EditOrderProcessor();
			Map<String, String> resultStatus = editOrderProcess.EditOrder(requestingAdmin, editedOrder);

			if(resultStatus.get("status").equals(ResponseStatus.Failed.toString())) {
				if(resultStatus.containsKey("errorMssg")) {
					response.put("status", resultStatus.get("status").toString());
					response.put("errorMssg", resultStatus.get("errorMssg").toString());
					
					JSONObject adminJSON = new JSONObject();
					adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
					response.put("admin", adminJSON);
					
					return response.toString();
				}
				
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			
			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();				
		}catch(Exception e) {
			e.printStackTrace();
			//response.put("errorMessage", e.getMessage());
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
	
		
		return response.toString();
	}
	@POST @Path("Cancel") @Produces(MediaType.APPLICATION_JSON)
	public String CancelOrder(String cancelRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(cancelRequest);
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			Order cancelledOrder = new Order();
			cancelledOrder.setOrderNumber(Integer.parseInt(requestJSON.get("orderNumber").toString()));
			
			AdminOrderCancellationProcessor cancelOrderProcess = new AdminOrderCancellationProcessor();
			Map<String, String> resultStatus = cancelOrderProcess.CancelOrder(requestingAdmin, cancelledOrder);
			if(resultStatus.get("status").equals(ResponseStatus.Failed.toString())) {
				if(resultStatus.containsKey("errorMssg")) {
					response.put("status", resultStatus.get("status"));
					response.put("errorMssg", resultStatus.get("errorMssg").toString());
					
					return response.toString();
				}
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			
//			JSONObject adminJSON = new JSONObject();
//			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString())
//			response.put("admin", adminJSON);
			
			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	@POST @Path("Delete") @Produces(MediaType.APPLICATION_JSON)
	public String DeleteOrder(String deleteOrderRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(deleteOrderRequest);
			
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			Order orderToDelete = new Order();
			orderToDelete.setOrderNumber(Integer.parseInt(requestJSON.get("orderNumber").toString()));
			DeleteOrderProcessor deleteOrderProcess = new DeleteOrderProcessor();
			boolean deleted = deleteOrderProcess.DeleteOrder(requestingAdmin, orderToDelete);
			if(!deleted) {
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			
			
			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();	
		}catch(Exception e) {
			e.printStackTrace();
			// response.put("errorMessage", e.getMessage());
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	@POST @Path("Fetch") @Produces(MediaType.APPLICATION_JSON)
	public String GetCompanyOrders(String getOrdersRequest) {
		JSONObject response = new JSONObject();
		try {
			System.out.println("FETCHINg ORDERS: " + getOrdersRequest);
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(getOrdersRequest);
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			System.out.println("IN Web service ( orders fetching): requestingAdmin.getID = "+  requestingAdmin.getAdminId());
			
			FetchOrdersProcessor fetchOrdersProcess = new FetchOrdersProcessor();
			
			List<Order> companyOrders = fetchOrdersProcess.getCompanyOrders(requestingAdmin);
			if(companyOrders == null) {
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						System.out.println("FETCHINg ORDERS RESPONSE 111111111111111111 : " + response);
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				System.out.println("FETCHINg ORDERS RESPONSE 2222222222222222222 : " + response);
				return response.toString();
			}
			
			
			response.put("status", ResponseStatus.Success.toString());
			
			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);		
			
			JSONArray listOfOrders = new JSONArray();
			for(final Order orderIterator : companyOrders) {
				JSONObject orderJSON= new JSONObject();
				
				orderJSON.put("orderId", orderIterator.getOrderId());
				orderJSON.put("orderNumber", orderIterator.getOrderNumber());
				orderJSON.put("orderReport", orderIterator.getOrderReport());
				orderJSON.put("orderId", orderIterator.getOrderId());
				orderJSON.put("orderId", orderIterator.getOrderId());
				orderJSON.put("orderId", orderIterator.getOrderId());
				
				orderJSON.put("orderState", orderIterator.getOrderState());
				orderJSON.put("orderRank", orderIterator.getOrderRank());
				
				/*LocalDate deliveryDate = LocalDate.parse(requestJSON.get("orderDeliveryDate").toString());
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("YYYY-MM-dd");
				rescheduledOrder.setOrderDeliveryDate(LocalDate.parse(formatter.format(deliveryDate).toString()));*/
				
				orderJSON.put("orderDeliveryDate", orderIterator.getOrderDeliveryDate().toString());
				
				orderJSON.put("orderDropOffAddress", orderIterator.getOrderDropOffAddress());
				orderJSON.put("orderLocationLink", orderIterator.getOrderLocationLink());	
				orderJSON.put("orderLocationPlusCode", orderIterator.getLocationPlusCode());
				
				orderJSON.put("customerName", orderIterator.getCustomer().getCustomerName());
				orderJSON.put("customerPhoneNo", orderIterator.getCustomer().getCustomerPhoneNo());
				orderJSON.put("orderId", orderIterator.getOrderId());
				
				orderJSON.put("driverId", orderIterator.getAssignedDriver().getDriverId());
				orderJSON.put("driverName", orderIterator.getAssignedDriver().getDriverName());
				orderJSON.put("driverPhoneNo", orderIterator.getAssignedDriver().getDriverPhoneNo());
				orderJSON.put("driverEmail", orderIterator.getAssignedDriver().getDriverEmail());
				orderJSON.put("driverIsBanned", orderIterator.getAssignedDriver().getIsBanned());
				orderJSON.put("driverBannedUntil", orderIterator.getAssignedDriver().getBannedUntil() == null?
						null
						:orderIterator.getAssignedDriver().getBannedUntil().toString());
				
				
				listOfOrders.add(orderJSON);
			}
			
			response.put("listOfOrders", listOfOrders);
			System.out.println("FETCHINg ORDERS RESPONSE 3333333333333333333333: " + response);
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
}
