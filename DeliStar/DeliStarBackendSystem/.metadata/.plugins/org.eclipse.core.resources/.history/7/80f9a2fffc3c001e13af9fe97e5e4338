package com.deli.star.authentication;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Random;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Driver;
import com.deli.star.dao.DAO;
import com.deli.star.response.codes.ResponseStatus;

public class TokenAuthValidator {
	public boolean CreateAdminToken(Admin admin) {		
		try{
			LocalDate currentDate = LocalDate.now();
			LocalTime currentTime = LocalTime.now();
			String timeStampToken = currentDate.toString()+"_"+currentTime.toString();
			
			Random rand = new Random();
			timeStampToken += "_" + rand.nextDouble(admin.getAdminPassword().length());
			admin.setAdminToken(timeStampToken);
			
			DAO updateToken = new DAO();
			updateToken.UpdateAdminToken(admin);
			
			return true;
		}catch(Exception exception) {
			exception.printStackTrace();
			System.out.println(exception.getMessage());
		}
		
		
		return false;
		
	}
	public boolean ValidateAdminToken(Admin requestingAdmin) {		
		try{
			DAO fetch = new DAO();
			
			Admin foundAdmin = fetch.GetAdminCredentials(requestingAdmin);
			// foundAdmin.setAdminId(requestingAdmin.getAdminId());
			
			String currentToken = requestingAdmin.getAdminToken();
			String foundToken = foundAdmin.getAdminToken();
			System.out.println("In Authentication: foundToken = " + foundToken);
			System.out.println("In Authentication: currentToken = " + currentToken);
			
			if(currentToken == null || foundToken == null) {
				if(foundToken == null) {
					System.out.println("the admin is trying to request a sytem resource without logging in!!");
					requestingAdmin.setAdminToken(ResponseStatus.Invalid_Access.toString());
				}
				else {
					System.out.println("Here the admin Token is null!");
					requestingAdmin.setAdminToken(ResponseStatus.Not_Authentic.toString());
				}
				return false;
			}
			
			
			if(!currentToken.equals(foundToken)) {
				System.out.println("The problem in LINE 6 in TokenAuth.....");
				System.out.println("after Line 61: foundToken = " + foundToken);
				System.out.println("after Line 61: curretnToken = " + currentToken);
				requestingAdmin.setAdminToken(ResponseStatus.Not_Authentic.toString());
				return false;
			}
			
			
			LocalDate currentDate = LocalDate.now();
			LocalTime currentTime = LocalTime.now();
			
			
			// Checking if the admin session is active (valid).
//			LocalDate lastRequestDate = LocalDate.parse(foundToken.split("_")[0]);
//			LocalTime lastRequestTime = LocalTime.parse(foundToken.split("_")[1]);
//			if(lastRequestDate.compareTo(currentDate) != 0 || lastRequestTime.plusMinutes(45).compareTo(currentTime) < 0) {
//				requestingAdmin.setAdminToken(ResponseStatus.Session_Timed_Out.toString());
//				
//				DAO updateToken = new DAO();
//				foundAdmin.setAdminToken(null);
//				updateToken.UpdateAdminToken(foundAdmin);
//				return false;
//			}
			
			
				
			String timeStampToken = currentDate.toString()+"_"+currentTime.toString();
			Random rand = new Random();
			
			
			timeStampToken += "_" +  rand.nextDouble(foundAdmin.getAdminPassword().length());
			foundAdmin.setAdminToken(timeStampToken);
			
			requestingAdmin.setAdminToken(timeStampToken);
			
			
			
			DAO updateToken = new DAO();			 
			updateToken.UpdateAdminToken(foundAdmin);
			return true;
		}catch(Exception exception) {
			exception.printStackTrace();
			System.out.println(exception.getMessage());
		}
		
		
		return false;
	}

	
	public boolean CreateDriverToken(Driver driver) {	
		try{
			LocalDate currentDate = LocalDate.now();
			LocalTime currentTime = LocalTime.now();
			String timeStampToken = currentDate.toString()+"_"+currentTime.toString();
			
			
			Random rand = new Random();
			timeStampToken += "_"+ rand.nextDouble(driver.getDriverPassword().length());
			driver.setDriverToken(timeStampToken);
			
			
			DAO updateToken = new DAO();
			updateToken.UpdateDriverToken(driver);
			
			return true;
		}catch(Exception exception) {
			exception.printStackTrace();
			System.out.println(exception.getMessage());
		}
		
		
		return false;
	}
	public boolean ValidateDriverToken(Driver requestingDriver) {
		try {
			DAO fetchToken = new DAO();
			Driver foundDriver = fetchToken.GetDriverCredentials(requestingDriver);
			
			foundDriver.setDriverId(requestingDriver.getDriverId());
			
			String currentToken = requestingDriver.getDriverToken();
			String foundToken = foundDriver.getDriverToken();
			
			if(currentToken == null || foundToken == null) {
				if(foundToken == null) {
					System.out.println("the driver is trying to request a sytem resource without logging in!!");
					requestingDriver.setDriverToken(ResponseStatus.Invalid_Access.toString());
				}
				else {
					System.out.println("Here the driver Token is null!!");
					requestingDriver.setDriverToken(ResponseStatus.Not_Authentic.toString());
				}
				
				return false;
			}
			if(!currentToken.equals(foundToken)) {
				System.out.println("The problem in LINE 6 in TokenAuth.....");
				System.out.println("after Line 61: foundToken = " + foundToken);
				System.out.println("after Line 61: curretnToken = " + currentToken);
				requestingDriver.setDriverToken(ResponseStatus.Not_Authentic.toString());
				return false;
			}
			
			
			LocalDate currentDate = LocalDate.now();
			LocalTime currentTime = LocalTime.now();
			String timeStampToken = currentDate.toString()+"_"+currentTime.toString();
			
			Random rand = new Random();		
			timeStampToken += "_"+rand.nextDouble(foundDriver.getDriverPassword().length());
			foundDriver.setDriverToken(timeStampToken);
			
			requestingDriver.setDriverToken(timeStampToken);
			
			
			
			DAO updateToken = new DAO();			
			updateToken.UpdateDriverToken(foundDriver);
			
			return true;
		}catch(Exception exception) {
			exception.printStackTrace();
			System.out.println(exception.getMessage());
		}
		return false;
		
	}
}
