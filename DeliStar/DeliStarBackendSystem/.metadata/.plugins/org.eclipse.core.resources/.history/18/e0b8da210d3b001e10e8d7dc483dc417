package com.deli.star.processor;

import java.sql.Savepoint;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Company;
import com.deli.star.DTO.Customer;
import com.deli.star.DTO.Driver;
import com.deli.star.DTO.Order;
import com.deli.star.authentication.TokenAuthValidator;
import com.deli.star.dao.DAO;
import com.deli.star.response.codes.ResponseStatus;
import com.deli.star.validation.ValidationUtility;

public class AddOrderProcessor {
	public Map<String, String> AddOrders(Admin requestingAdmin, ArrayList<Order> ordersList) {
		try{
			Map<String, String> result = new HashMap<String, String>();
			
			// requestingAdmin authentication (by token).
			TokenAuthValidator adminTokenAuth = new TokenAuthValidator();
		
			DAO fetchAndAdd = new DAO();
			
			
			boolean authenticated = adminTokenAuth.ValidateAdminToken(requestingAdmin);
			if(!authenticated) {
				result.put("status", ResponseStatus.Failed.toString());
				return result;
			}
			
			for(Order orderItr : ordersList) {				
				
				// Validating the order's customer information.
				Customer orderCustomer = orderItr.getCustomer();
				orderCustomer.setCustomerName(ValidationUtility.validateName(orderCustomer.getCustomerName()));
				if(orderCustomer.getCustomerName() == null) {
					fetchAndAdd.CloseConnection();
					result.put("status", ResponseStatus.Failed.toString());
					result.put("errorMssg", "The customer name is invalid. Customer name must only contain characters and spaces and can contain at most 25 characters.");
					return result;
				}
				
				orderCustomer.setCustomerPhoneNo(ValidationUtility.validatePhoneNo(orderCustomer.getCustomerPhoneNo()));
				if(orderCustomer.getCustomerPhoneNo() == null) {
					fetchAndAdd.CloseConnection();
					result.put("status", ResponseStatus.Failed.toString());
					result.put("errorMssg", "The customer phone number is invalid. Customer phone number must start with + and your country code "
							+ "and must at contain 7 digits minimum and 15 digits maximum.");
					return result;
				}
				
				orderItr.setCustomer(orderCustomer);
				
				
				if(orderItr.getOrderDeliveryDate().compareTo(LocalDate.now()) < 0){
					fetchAndAdd.CloseConnection();
					result.put("status", ResponseStatus.Failed.toString());
					result.put("errorMssg", "The order delivery date is in the past. Order delivery date must be at least today ?".replace("?", LocalDate.now().toString()));
					return result;
				}
				
				
				
				// Checking whether the assigned driver to deliver this new order exists already or not
				// (if not then the request is invalid). 
				// Also checking if the driver belongs to the same company that the requestingAdmin belongs to.
				Driver foundDriver = fetchAndAdd.GetDriver(orderItr.getAssignedDriver());
				if(foundDriver == null || foundDriver.getDriverId() == 0) {
					fetchAndAdd.CloseConnection();
					
					requestingAdmin.setAdminToken(ResponseStatus.Incorrect_Info.toString());
					result.put("status", ResponseStatus.Failed.toString());
					return result;
				}
				Company adminCompany = fetchAndAdd.GetAdminCompany(requestingAdmin);
				if(foundDriver.getCompany().getCompanyId() != adminCompany.getCompanyId()) {
					fetchAndAdd.CloseConnection();
					
					requestingAdmin.setAdminToken(ResponseStatus.Not_Authorized.toString());
					result.put("status", ResponseStatus.Failed.toString());
					return result;
				}
				orderItr.assignDriver(foundDriver);
				
				
				//Checking if the company exists already (if not then the request is invalid).
				if(adminCompany == null || adminCompany.getCompanyId() == 0) {
					fetchAndAdd.CloseConnection();
					
					requestingAdmin.setAdminToken(ResponseStatus.Incorrect_Info.toString());
					result.put("status", ResponseStatus.Failed.toString());
					return result;
				}
				orderItr.setCompanyId(adminCompany.getCompanyId());
				
				
				// Checking whether the customer exists already or not
				// (if not the customer will be added).
				Customer foundCustomer = fetchAndAdd.GetCustomer(orderItr.getCustomer());
				if(foundCustomer == null || foundCustomer.getCustomerId() == 0) {				
					boolean added = fetchAndAdd.AddCustomer(orderItr.getCustomer());
					if(added) {
						founCustomer = fetchAndAdd.GetCustomer(foundCustomer)
						orderItr.setCustomer(foundCustomer);
					}
				}
				else {
					orderItr.setCustomer(foundCustomer);
				}
				
				
				//Adding the order properly.
				boolean added = fetchAndAdd.AddOrder(orderItr);
				if(!added) {
					fetchAndAdd.DeleteOrder(orderItr);
					fetchAndAdd.DeleteCustomer(foundCustomer);
					fetchAndAdd.CloseConnection();
					
					result.put("status", ResponseStatus.Failed.toString());
					result.put("errorMssg", "This order already exists!");
					return result;
				}
			}
			
			
			fetchAndAdd.CloseConnection();
			
			result.put("status", ResponseStatus.Success.toString());
			return result;
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw e;
		}
		
	}
}
