package com.deli.star.processor;

import java.time.LocalDate;
import java.util.ArrayList;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Company;
import com.deli.star.DTO.Driver;
import com.deli.star.DTO.Order;
import com.deli.star.authentication.TokenAuthValidator;
import com.deli.star.dao.DAO;
import com.deli.star.response.codes.ResponseStatus;

public class FetchOrdersProcessor {
	public ArrayList<Order> getCompanyOrders(Admin requestingAdmin){
		try {
			// Admin authentication by token.
			DAO fetchAndGet = new DAO();
			TokenAuthValidator adminAuth = new TokenAuthValidator();
			boolean authentic = adminAuth.ValidateAdminToken(requestingAdmin);
			if(!authentic) {
				return null;
			}
			
			System.out.println("IN Processor( orders fetching): requestingAdmin.getID = "+  requestingAdmin.getAdminId());
			ArrayList<Order> companyOrders = fetchAndGet.GetCompanyOrders(requestingAdmin);
			if(companyOrders == null) {
				return new ArrayList<Order>(1);
			}
			return companyOrders;
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		
		return null;
	}
	
	public ArrayList<Order> getDriverOrders(Driver requestingDriver, String orders_State, Double  driverLat, Double  driverLng, ArrayList<Character> status){
		try {
			// Driver authentication by token.
			TokenAuthValidator driverAuth = new TokenAuthValidator();
			boolean authentic = driverAuth.ValidateDriverToken(requestingDriver);
			if(!authentic) {
				System.out.println("NOT_AUTHENTIC_orderState: " + orders_State);
				return null;
			}
			
			
			System.out.println("AUTHENTIC_orderState: " + orders_State);
			System.out.println("AUTHENTIC_token: " + requestingDriver.getDriverToken());
			DAO fetchAndGet = new DAO();
			 
			System.out.println("BEFOOOOOREE : orderSTATE: " + orders_State);
			
			ArrayList<Order> driverOrders = fetchAndGet.GetDriverOrders(requestingDriver, orders_State);
			if(driverOrders == null) {
				Driver checkDriverBan = fetchAndGet.GetDriver(requestingDriver);
				if(checkDriverBan.getIsBanned()) {
					System.out.println("HERRERERER!!!! ");
					String statusStr = new String(ResponseStatus.Driver_Banned.toString());
					for(int i=0; i< statusStr.length(); i++) {
						status.add(statusStr.charAt(i));
					}
					
					System.out.println("aFTER HERERER: ");
					System.out.println("after status: " + status);
					return null;
				}
				
				return new ArrayList<Order>(1);
			}
			
			if(orders_State == null) {
				String statusStr = new String(ResponseStatus.Driver_Banned.toString());
				for(int i=0; i< statusStr.length(); i++) {
					status.add(statusStr.charAt(i));
				}
				
				return null;
			}
			System.out.println("BUILDING PATH AFter DAO!!!!!!!!!!!!!!!");
			// Build the path of pending orders for the driver.
			if(orders_State.equals("pending")) {
				
				// Checking whether the driver banned or not, and if so he cannot retrieve
				// assigned orders (to block them from modifying the orders).
				Driver checkDriverBan = fetchAndGet.GetDriver(requestingDriver);
				if(checkDriverBan.getIsBanned()) {
					System.out.println("HERRERERER!!!! ");
					String statusStr = new String(ResponseStatus.Driver_Banned.toString());
					for(int i=0; i< statusStr.length(); i++) {
						status.add(statusStr.charAt(i));
					}
					
					System.out.println("aFTER HERERER: ");
					System.out.println("after status: " + status);
					return null;
				}
				
				System.out.println("before getNextOrder works in processsor!!!!");
				
				ArrangePathProcessor getNextOrderProcess = new ArrangePathProcessor();
				Order nextOrder = getNextOrderProcess.GetNextOrder(driverOrders, driverLat.doubleValue(), driverLng.doubleValue(), 
						driverOrders.get(0).getOrderRank() == 0 ?
								1
						: driverOrders.get(0).getOrderRank());
				
				System.out.println("after getNextOrder works in processsor!!!!");
				System.out.println("before GetOrderCompany works in processsor!!!!");
				
				Company orderCompany = fetchAndGet.GetOrderCompany(nextOrder);
				nextOrder.setCompanyId(orderCompany.getCompanyId());
				
				System.out.println("after GetOrderCompany works in processsor!!!!");
				
				boolean updatedRank = fetchAndGet.UpdateOrderRank(nextOrder);
				if(!updatedRank) {
					return null;
				}
				
				System.out.println("before getOrderId works in processsor!!!!");
				
				int nextOrderId = nextOrder.getOrderId();
				
				System.out.println("after getOrderId works in processsor!!!!");
				
				
				System.out.println("before Swapping Process works in processsor!!!!");
				int index = 0;
				while(index < driverOrders.size()) {
					if(driverOrders.get(index).getOrderId() == nextOrderId) {
						break;
					}
					index++;
				}
				
				if(index < driverOrders.size()) {
					driverOrders.set(index, driverOrders.get(0));
					driverOrders.set(0, nextOrder);
				}
				else {
					driverOrders.add(0, nextOrder);
				}
			}
			
			return driverOrders;
				
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		
		return null;
	}
}
