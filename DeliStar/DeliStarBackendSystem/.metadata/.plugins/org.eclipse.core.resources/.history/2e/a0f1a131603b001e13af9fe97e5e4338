package com.deli.star.service;

import java.time.LocalDate;
import java.util.ArrayList;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.deli.star.DTO.Admin;
import com.deli.star.DTO.Driver;
import com.deli.star.DTO.Order;
import com.deli.star.processor.AssignDriverProcessor;
import com.deli.star.processor.BanDriverProcessor;
import com.deli.star.processor.DeleteDriverProcessor;
import com.deli.star.processor.GetCompanyDriversProcessor;
import com.deli.star.response.codes.ResponseStatus;

@Path("/Management/Drivers/")
public class DriversManagementService {
	@POST @Path("Assign") @Produces(MediaType.APPLICATION_JSON)
	public String AssignDriver(String assignRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(assignRequest);
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			
			Driver assignedDriver = new Driver();
			assignedDriver.setDriverId(Integer.parseInt(requestJSON.get("driverId").toString()));
			
			
			Order orderToAssign = new Order();
			orderToAssign.setOrderNumber(Integer.parseInt(requestJSON.get("orderNumber").toString()));
			
			
			AssignDriverProcessor assignProcess = new AssignDriverProcessor();
			boolean assigned = assignProcess.AssignDriver(requestingAdmin, assignedDriver, orderToAssign);
			
			if(!assigned) {
				if(ResponseStatus.Driver_Banned.toString().equals( requestingAdmin.getAdminToken().toString())) {
					response.put("status", ResponseStatus.Driver_Banned.toString());
					
					JSONObject adminJSON = new JSONObject();
					adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
					response.put("admin", adminJSON);
					return response.toString();
				}
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals( responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();			
			}
			
			response.put("status", ResponseStatus.Success.toString());

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	@POST @Path("Delete") @Produces(MediaType.APPLICATION_JSON)
	public String DeleteDriver(String deleteRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(deleteRequest);
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			
			Driver driverToDelete = new Driver();
			driverToDelete.setDriverId(Integer.parseInt(requestJSON.get("driverId").toString()));
			
			
			DeleteDriverProcessor deleteProcess = new DeleteDriverProcessor();
			Map<String, String> statusResult = deleteProcess.DeleteDriver(requestingAdmin, driverToDelete);
			
			if() {
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals( responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();					
			}
			
			
			response.put("status", ResponseStatus.Success.toString());

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();			
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	@POST @Path("Ban") @Produces(MediaType.APPLICATION_JSON)
	public String BanDriver(String banRequest) {
		JSONObject response = new JSONObject();
		try {
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(banRequest);
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			
			Driver driverToBan = new Driver();
			driverToBan.setDriverId(Integer.parseInt(requestJSON.get("driverId").toString()));
			int days = Integer.parseInt(requestJSON.get("daysOfBan").toString());
			int months = Integer.parseInt(requestJSON.get("monthsOfBan").toString());
			int years = Integer.parseInt(requestJSON.get("yearsOfBan").toString());
			
			driverToBan.setBannedUntil(LocalDate.now().plusDays(days).plusMonths(months).plusYears(years));
			
			
			BanDriverProcessor banProcess = new BanDriverProcessor();		
			boolean isBanned = banProcess.BanDriver(requestingAdmin, driverToBan);
			
			if(!isBanned) {
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals( responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				
				return response.toString();	
			}
			
			response.put("status", ResponseStatus.Success.toString());
			
			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			return response.toString();
			
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
	
	@POST @Path("Fetch") @Produces(MediaType.APPLICATION_JSON)
	public String GetCompanyDrivers(String fetchRequest) {
		JSONObject response = new JSONObject();
		try {
			
			System.out.println("Fetching Driverssssssss: " + fetchRequest);
			JSONParser parser = new JSONParser();
			JSONObject requestJSON = (JSONObject)parser.parse(fetchRequest);
			
			
			Admin requestingAdmin = new Admin();
			requestingAdmin.setAdminId(Integer.parseInt(requestJSON.get("adminId").toString()));
			requestingAdmin.setAdminToken(requestJSON.get("adminToken").toString());
			
			GetCompanyDriversProcessor getDriversProcess = new GetCompanyDriversProcessor();
			ArrayList<Driver> listOfDrivers = getDriversProcess.GetDrivers(requestingAdmin);
			
			
			
			if(listOfDrivers == null) {
				
				ResponseStatus[] responses = ResponseStatus.class.getEnumConstants();
				for(ResponseStatus responseItr : responses) {
					if(requestingAdmin.getAdminToken().toString().equals(responseItr.toString())) {
						response.put("status", requestingAdmin.getAdminToken().toString());
						System.out.println("Fetch Drivers RESPONSE 1111111111111111111111111 : " + response);
						return response.toString();
					}
				}
				
				response.put("status", ResponseStatus.Failed.toString());
				JSONObject adminJSON = new JSONObject();
				adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
				response.put("admin", adminJSON);
				System.out.println("Fetch Drivers RESPONSE 222222222222222222222 : " + response);
				return response.toString();	
			}
			
			
			
			response.put("status", ResponseStatus.Success.toString());

			JSONObject adminJSON = new JSONObject();
			adminJSON.put("adminToken", requestingAdmin.getAdminToken().toString());
			response.put("admin", adminJSON);
			
			JSONArray companyDrivers = new JSONArray();
			for(Driver driverItr : listOfDrivers) {
				JSONObject driverJSON = new JSONObject();
				driverJSON.put("driverId", driverItr.getDriverId());
				driverJSON.put("driverName", driverItr.getDriverName().toString());
				driverJSON.put("driverEmail", driverItr.getDriverEmail().toString());
				driverJSON.put("driverGender", driverItr.getDriverGender().toString());
				driverJSON.put("driverPhoneNo", driverItr.getDriverPhoneNo().toString());
				
				companyDrivers.add(driverJSON);
			}
			
			
			
			response.put("listOfDrivers", companyDrivers);
			System.out.println("Fetch Drivers RESPONSE 333333333333333333333333 : " + response);
			return response.toString();
		}catch(Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			response.put("status", ResponseStatus.Failed.toString());
		}
		
		return response.toString();
	}
}
